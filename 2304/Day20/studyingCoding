import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set; 

class Solution {
        public int[] solution(String[] gems) {
            int[] answer = {};
            Map<String,Integer> map = new HashMap<>();
            Set<String> kind = new HashSet<>(Arrays.asList(gems));
            Queue<String> q = new LinkedList<>(); 

            if(kind.size() == 1) return new int[]{1, 1};
            int start = 0;
            int start_tmp = 0;
            int min_distance = Integer.MAX_VALUE;

            for(String gem : gems) {
                q.add(gem);
                map.put(gem, map.getOrDefault(gem,0)+1);

                while(true) {
                    String tmp = q.peek();
                    if(map.get(tmp) > 1) {
                        map.put(tmp,map.get(tmp)-1);
                        q.poll();
                        start_tmp++;
                    }
                    else break;
                }

                if(map.size() == kind.size() && min_distance > q.size()) {
                    min_distance = q.size();
                    start = start_tmp;
                }
            }

            return new int[]{start+1,start+ min_distance};
        }
    }