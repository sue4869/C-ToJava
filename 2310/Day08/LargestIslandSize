public class LargestIslandSize {
 
    static int dfs(int i, int j, int[][] grid, boolean[][] visited) {
        int n = grid.length;
 
        if (i < 0 || j < 0 || i >= n || j >= n || visited[i][j] || grid[i][j] == 0) {
            return 0;
        }
 
        visited[i][j] = true;
 
        int count = 1 + dfs(i + 1, j, grid, visited)
                     + dfs(i - 1, j, grid, visited)
                     + dfs(i, j + 1, grid, visited)
                     + dfs(i, j - 1, grid, visited);
 
        return count;
    }

    static int largestIsland(int[][] grid) {
        int n = grid.length;
 
        int result = -1;
 

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
 
                    boolean[][] visited = new boolean[n][n];
 
                    int res1 = dfs(i + 1, j, grid, visited);
                    int res2 = dfs(i - 1, j, grid, visited);
                    int res3 = dfs(i, j + 1, grid, visited);
                    int res4 = dfs(i, j - 1, grid, visited);
 
                    int res = 1 + res1 + res2 + res3 + res4;

                    result = Math.max(result, res);
                }
            }
        }
        if (result == -1) {
            return n * n;
        }
        return result;
    }